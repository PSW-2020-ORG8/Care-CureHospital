// <auto-generated />
using System;
using Backend.Repository.MySQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Migrations
{
    [DbContext(typeof(HealthClinicDbContext))]
    partial class HealthClinicDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Backend.Model.BlogAndNotification.PatientFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsForPublishing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientFeedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAnonymous = false,
                            IsForPublishing = true,
                            IsPublished = true,
                            PatientId = 1,
                            PublishingDate = new DateTime(2020, 10, 30, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            Text = "Iako rečenica nema značenje, ona ima dugu istoriju. Nju su nekoliko vekova koristili tipografi da bi prikazali najistaknutije osobine svojih fontova. Koristi se zbog toga što slova koja su uključena u nju, kao i razmak između slova u tim kombinacijama na najbolji mogući način otkrivaju težinu, dizajn i druge važne funkcije slovnog oblika."
                        },
                        new
                        {
                            Id = 2,
                            IsAnonymous = true,
                            IsForPublishing = true,
                            IsPublished = true,
                            PatientId = 2,
                            PublishingDate = new DateTime(2020, 8, 15, 9, 17, 0, 0, DateTimeKind.Unspecified),
                            Text = "Iako rečenica nema značenje, ona ima dugu istoriju. Nju su nekoliko vekova koristili tipografi da bi prikazali najistaknutije osobine svojih fontova. Koristi se zbog toga što slova koja su uključena u nju, kao i razmak između slova u tim kombinacijama na najbolji mogući način otkrivaju težinu, dizajn i druge važne funkcije slovnog oblika."
                        },
                        new
                        {
                            Id = 3,
                            IsAnonymous = true,
                            IsForPublishing = true,
                            IsPublished = false,
                            PatientId = 3,
                            PublishingDate = new DateTime(2020, 9, 3, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            Text = "Iako rečenica nema značenje, ona ima dugu istoriju. Nju su nekoliko vekova koristili tipografi da bi prikazali najistaknutije osobine svojih fontova. Koristi se zbog toga što slova koja su uključena u nju, kao i razmak između slova u tim kombinacijama na najbolji mogući način otkrivaju težinu, dizajn i druge važne funkcije slovnog oblika."
                        },
                        new
                        {
                            Id = 4,
                            IsAnonymous = false,
                            IsForPublishing = false,
                            IsPublished = false,
                            PatientId = 4,
                            PublishingDate = new DateTime(2020, 11, 6, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Text = "Iako rečenica nema značenje, ona ima dugu istoriju. Nju su nekoliko vekova koristili tipografi da bi prikazali najistaknutije osobine svojih fontova. Koristi se zbog toga što slova koja su uključena u nju, kao i razmak između slova u tim kombinacijama na najbolji mogući način otkrivaju težinu, dizajn i druge važne funkcije slovnog oblika."
                        },
                        new
                        {
                            Id = 5,
                            IsAnonymous = false,
                            IsForPublishing = false,
                            IsPublished = false,
                            PatientId = 2,
                            PublishingDate = new DateTime(2020, 10, 18, 7, 30, 0, 0, DateTimeKind.Unspecified),
                            Text = "Iako rečenica nema značenje, ona ima dugu istoriju. Nju su nekoliko vekova koristili tipografi da bi prikazali najistaknutije osobine svojih fontova. Koristi se zbog toga što slova koja su uključena u nju, kao i razmak između slova u tim kombinacijama na najbolji mogući način otkrivaju težinu, dizajn i druge važne funkcije slovnog oblika."
                        },
                        new
                        {
                            Id = 6,
                            IsAnonymous = true,
                            IsForPublishing = true,
                            IsPublished = false,
                            PatientId = 4,
                            PublishingDate = new DateTime(2020, 10, 15, 6, 30, 0, 0, DateTimeKind.Unspecified),
                            Text = "Iako rečenica nema značenje, ona ima dugu istoriju. Nju su nekoliko vekova koristili tipografi da bi prikazali najistaknutije osobine svojih fontova. Koristi se zbog toga što slova koja su uključena u nju, kao i razmak između slova u tim kombinacijama na najbolji mogući način otkrivaju težinu, dizajn i druge važne funkcije slovnog oblika."
                        });
                });

            modelBuilder.Entity("Backend.Model.DoctorMenager.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MedicamentId")
                        .HasColumnType("int");

                    b.Property<string>("MedicamentName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Report");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FromDate = new DateTime(2019, 5, 1, 6, 30, 0, 0, DateTimeKind.Unspecified),
                            MedicamentId = 1,
                            MedicamentName = "Brufen",
                            Quantity = 10,
                            ToDate = new DateTime(2019, 10, 1, 6, 10, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            FromDate = new DateTime(2020, 10, 30, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            MedicamentId = 2,
                            MedicamentName = "Panadol",
                            Quantity = 15,
                            ToDate = new DateTime(2020, 2, 5, 6, 10, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            FromDate = new DateTime(2019, 1, 10, 3, 30, 0, 0, DateTimeKind.Unspecified),
                            MedicamentId = 4,
                            MedicamentName = "Vitamin B",
                            Quantity = 120,
                            ToDate = new DateTime(2019, 5, 10, 6, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            FromDate = new DateTime(2020, 1, 5, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            MedicamentId = 3,
                            MedicamentName = "Paracetamol",
                            Quantity = 24,
                            ToDate = new DateTime(2020, 12, 10, 6, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Backend.Model.PatientDoctor.EPrescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MedicamentName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("PatientName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("PublishingDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("EPrescription");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Redovno koristite prepisane lekove",
                            MedicamentName = "Aspirin",
                            PatientId = 1,
                            PatientName = "Petar",
                            PublishingDate = new DateTime(2020, 11, 30, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Svakodnevno koristite prepisani lek",
                            MedicamentName = "Brufen",
                            PatientId = 2,
                            PatientName = "Mica",
                            PublishingDate = new DateTime(2020, 9, 12, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Redovno koristite prepisane lekove",
                            MedicamentName = "Vitamin B",
                            PatientId = 3,
                            PatientName = "Zika",
                            PublishingDate = new DateTime(2020, 12, 25, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Ne preskacite konzumiranje leka",
                            MedicamentName = "Panadol",
                            PatientId = 5,
                            PatientName = "Ivan",
                            PublishingDate = new DateTime(2020, 10, 12, 3, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Redovno koristite prepisane lekove",
                            MedicamentName = "Andol",
                            PatientId = 6,
                            PatientName = "Marko",
                            PublishingDate = new DateTime(2020, 11, 26, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Backend.Model.PatientDoctor.MedicalExaminationReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MedicalExaminationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishingDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalExaminationId");

                    b.ToTable("MedicalExaminationReport");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Pacijent je dobro i nema vecih problema",
                            MedicalExaminationId = 3,
                            PublishingDate = new DateTime(2020, 9, 20, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Pacijent je veoma dobro i nema vecih problema",
                            MedicalExaminationId = 4,
                            PublishingDate = new DateTime(2020, 11, 23, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Pacijent ima virus",
                            MedicalExaminationId = 2,
                            PublishingDate = new DateTime(2020, 9, 12, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Pacijent je lose",
                            MedicalExaminationId = 2,
                            PublishingDate = new DateTime(2020, 10, 14, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Pacijent ima virus",
                            MedicalExaminationId = 2,
                            PublishingDate = new DateTime(2020, 11, 18, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Backend.Model.PatientDoctor.Prescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MedicalExaminationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishingDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("MedicalExaminationId");

                    b.ToTable("Prescription");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Redovno koristite prepisane lekove",
                            MedicalExaminationId = 4,
                            PublishingDate = new DateTime(2020, 11, 30, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Svakodnevno koristite prepisani lek",
                            MedicalExaminationId = 3,
                            PublishingDate = new DateTime(2020, 9, 12, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Redovno koristite prepisane lekove",
                            MedicalExaminationId = 2,
                            PublishingDate = new DateTime(2020, 12, 25, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Ne preskacite konzumiranje leka",
                            MedicalExaminationId = 2,
                            PublishingDate = new DateTime(2020, 10, 12, 3, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Redovno koristite prepisane lekove",
                            MedicalExaminationId = 4,
                            PublishingDate = new DateTime(2020, 11, 26, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Backend.Model.Pharmacy.Pharmacies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Link")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Pharmacies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Key = "1234",
                            Link = "apoteka1.com",
                            Name = "Apoteka1"
                        },
                        new
                        {
                            Id = 2,
                            Key = "5678",
                            Link = "apoteka2.com",
                            Name = "Apoteka2"
                        },
                        new
                        {
                            Id = 3,
                            Key = "9101112",
                            Link = "apoteka3.com",
                            Name = "Apoteka3"
                        });
                });

            modelBuilder.Entity("Model.AllActors.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PostCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Brace Jerkovic 1",
                            CountryId = 1,
                            Name = "Beograd",
                            PostCode = 11000
                        },
                        new
                        {
                            Id = 2,
                            Address = "Bulevar Cara Lazara 1",
                            CountryId = 1,
                            Name = "Novi Sad",
                            PostCode = 22100
                        });
                });

            modelBuilder.Entity("Model.AllActors.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Srbija"
                        });
                });

            modelBuilder.Entity("Model.AllActors.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BloodGroup")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EMail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("HealthInsuranceCard")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Jmbg")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ParentName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("SpecialitationId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("SpecialitationId");

                    b.ToTable("Doctor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BloodGroup = 0,
                            CityId = 2,
                            ContactNumber = "06345111144",
                            DateOfBirth = new DateTime(2000, 1, 1, 3, 3, 3, 0, DateTimeKind.Unspecified),
                            EMail = "milan@gmail.com",
                            Gender = 0,
                            Jmbg = "13312312312312",
                            Name = "Milan",
                            Password = "123",
                            SpecialitationId = 1,
                            Surname = "Petrovic",
                            Username = "milan"
                        },
                        new
                        {
                            Id = 2,
                            BloodGroup = 0,
                            CityId = 1,
                            ContactNumber = "06345111144",
                            DateOfBirth = new DateTime(2004, 1, 1, 3, 3, 3, 0, DateTimeKind.Unspecified),
                            EMail = "aca@gmail.com",
                            Gender = 0,
                            Jmbg = "13212312312312",
                            Name = "Aleksandar",
                            Password = "123",
                            SpecialitationId = 1,
                            Surname = "Aleksic",
                            Username = "aca"
                        },
                        new
                        {
                            Id = 3,
                            BloodGroup = 0,
                            CityId = 2,
                            ContactNumber = "06345111144",
                            DateOfBirth = new DateTime(2005, 1, 1, 3, 3, 3, 0, DateTimeKind.Unspecified),
                            EMail = "jovan@gmail.com",
                            Gender = 0,
                            Jmbg = "13312367312312",
                            Name = "Jovan",
                            Password = "123",
                            SpecialitationId = 2,
                            Surname = "Jovic",
                            Username = "jovan"
                        },
                        new
                        {
                            Id = 4,
                            BloodGroup = 0,
                            CityId = 1,
                            ContactNumber = "06345111144",
                            DateOfBirth = new DateTime(2004, 1, 1, 3, 3, 3, 0, DateTimeKind.Unspecified),
                            EMail = "nikola@gmail.com",
                            Gender = 0,
                            Jmbg = "13316712312312",
                            Name = "Nikola",
                            Password = "123",
                            SpecialitationId = 1,
                            Surname = "Nikic",
                            Username = "nikola"
                        },
                        new
                        {
                            Id = 5,
                            BloodGroup = 0,
                            CityId = 2,
                            ContactNumber = "06345111144",
                            DateOfBirth = new DateTime(2005, 1, 1, 3, 3, 3, 0, DateTimeKind.Unspecified),
                            EMail = "mihajlo@gmail.com",
                            Gender = 0,
                            Jmbg = "13312367312312",
                            Name = "Mihajlo",
                            Password = "123",
                            SpecialitationId = 3,
                            Surname = "Mihajlovic",
                            Username = "mihajlo"
                        },
                        new
                        {
                            Id = 6,
                            BloodGroup = 0,
                            CityId = 1,
                            ContactNumber = "06345111144",
                            DateOfBirth = new DateTime(2004, 1, 1, 3, 3, 3, 0, DateTimeKind.Unspecified),
                            EMail = "vuk@gmail.com",
                            Gender = 0,
                            Jmbg = "13316712312312",
                            Name = "Vuk",
                            Password = "123",
                            SpecialitationId = 3,
                            Surname = "Vukic",
                            Username = "vuk"
                        },
                        new
                        {
                            Id = 7,
                            BloodGroup = 0,
                            CityId = 2,
                            ContactNumber = "06345111144",
                            DateOfBirth = new DateTime(2005, 1, 1, 3, 3, 3, 0, DateTimeKind.Unspecified),
                            EMail = "helena@gmail.com",
                            Gender = 0,
                            Jmbg = "13312367312312",
                            Name = "Helena",
                            Password = "123",
                            SpecialitationId = 4,
                            Surname = "Kostic",
                            Username = "helena"
                        },
                        new
                        {
                            Id = 8,
                            BloodGroup = 0,
                            CityId = 1,
                            ContactNumber = "06345111144",
                            DateOfBirth = new DateTime(2004, 1, 1, 3, 3, 3, 0, DateTimeKind.Unspecified),
                            EMail = "marija@gmail.com",
                            Gender = 0,
                            Jmbg = "13316712312312",
                            Name = "Marija",
                            Password = "123",
                            SpecialitationId = 4,
                            Surname = "Marijic",
                            Username = "marija"
                        },
                        new
                        {
                            Id = 9,
                            BloodGroup = 0,
                            CityId = 1,
                            ContactNumber = "06345111144",
                            DateOfBirth = new DateTime(2004, 1, 1, 3, 3, 3, 0, DateTimeKind.Unspecified),
                            EMail = "tanja@gmail.com",
                            Gender = 0,
                            Jmbg = "13316712312312",
                            Name = "Tanja",
                            Password = "123",
                            SpecialitationId = 5,
                            Surname = "Tankosic",
                            Username = "tanja"
                        });
                });

            modelBuilder.Entity("Model.AllActors.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Blocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("BloodGroup")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EMail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("GuestAccount")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("HealthInsuranceCard")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("IdentityCard")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Jmbg")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Malicious")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ParentName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Blocked = false,
                            BloodGroup = 2,
                            CityId = 1,
                            ContactNumber = "063554533",
                            DateOfBirth = new DateTime(2000, 1, 1, 3, 3, 3, 0, DateTimeKind.Unspecified),
                            EMail = "pera@gmail.com",
                            Gender = 0,
                            GuestAccount = false,
                            HealthInsuranceCard = "32312312312",
                            IdentityCard = "123123123",
                            Jmbg = "13312312312312",
                            Malicious = false,
                            Name = "Petar",
                            ParentName = "Zika",
                            Password = "123",
                            Surname = "Petrovic",
                            Username = "pera"
                        },
                        new
                        {
                            Id = 2,
                            Blocked = false,
                            BloodGroup = 2,
                            CityId = 2,
                            ContactNumber = "0635235333",
                            DateOfBirth = new DateTime(2001, 1, 1, 3, 3, 3, 0, DateTimeKind.Unspecified),
                            EMail = "zika@gmail.com",
                            Gender = 0,
                            GuestAccount = false,
                            HealthInsuranceCard = "712312312312",
                            IdentityCard = "124123123",
                            Jmbg = "12342312312312",
                            Malicious = false,
                            Name = "Zika",
                            ParentName = "Pera",
                            Password = "123",
                            Surname = "Zikic",
                            Username = "zika"
                        },
                        new
                        {
                            Id = 3,
                            Blocked = false,
                            BloodGroup = 0,
                            CityId = 1,
                            ContactNumber = "0635557673",
                            DateOfBirth = new DateTime(2002, 1, 1, 3, 3, 3, 0, DateTimeKind.Unspecified),
                            EMail = "mica@gmail.com",
                            Gender = 0,
                            GuestAccount = false,
                            HealthInsuranceCard = "62312312312",
                            IdentityCard = "163123123",
                            Jmbg = "12312512312312",
                            Malicious = false,
                            Name = "Mica",
                            ParentName = "Jelena",
                            Password = "123",
                            Surname = "Micic",
                            Username = "mica"
                        },
                        new
                        {
                            Id = 4,
                            Blocked = false,
                            BloodGroup = 2,
                            CityId = 2,
                            ContactNumber = "063555356",
                            DateOfBirth = new DateTime(2004, 1, 1, 3, 3, 3, 0, DateTimeKind.Unspecified),
                            EMail = "luna@gmail.com",
                            Gender = 1,
                            GuestAccount = false,
                            HealthInsuranceCard = "52312312312",
                            IdentityCard = "127123123",
                            Jmbg = "12312316712312",
                            Malicious = false,
                            Name = "Luna",
                            ParentName = "Jovan",
                            Password = "123",
                            Surname = "Lunic",
                            Username = "luna"
                        },
                        new
                        {
                            Id = 5,
                            Blocked = false,
                            BloodGroup = 2,
                            CityId = 2,
                            ContactNumber = "063775356",
                            DateOfBirth = new DateTime(2004, 1, 1, 3, 3, 3, 0, DateTimeKind.Unspecified),
                            EMail = "ivan@gmail.com",
                            Gender = 0,
                            GuestAccount = false,
                            HealthInsuranceCard = "52318812312",
                            IdentityCard = "127199123",
                            Jmbg = "12344316712312",
                            Malicious = true,
                            Name = "Ivan",
                            ParentName = "Luka",
                            Password = "123",
                            Surname = "Ivanovic",
                            Username = "ivan"
                        },
                        new
                        {
                            Id = 6,
                            Blocked = false,
                            BloodGroup = 2,
                            CityId = 2,
                            ContactNumber = "063555312",
                            DateOfBirth = new DateTime(2004, 1, 1, 3, 3, 3, 0, DateTimeKind.Unspecified),
                            EMail = "marko@gmail.com",
                            Gender = 0,
                            GuestAccount = false,
                            HealthInsuranceCard = "52312312311",
                            IdentityCard = "127123333",
                            Jmbg = "12312316712344",
                            Malicious = true,
                            Name = "Marko",
                            ParentName = "Jovan",
                            Password = "123",
                            Surname = "Markovic",
                            Username = "marko"
                        });
                });

            modelBuilder.Entity("Model.Doctor.Specialitation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SpecialitationForDoctor")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Specialitations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SpecialitationForDoctor = "Lekar opste prakse"
                        },
                        new
                        {
                            Id = 2,
                            SpecialitationForDoctor = "Ortoped"
                        },
                        new
                        {
                            Id = 3,
                            SpecialitationForDoctor = "Kardiolog"
                        },
                        new
                        {
                            Id = 4,
                            SpecialitationForDoctor = "Dermatolog"
                        },
                        new
                        {
                            Id = 5,
                            SpecialitationForDoctor = "Endokrinolog"
                        });
                });

            modelBuilder.Entity("Model.DoctorMenager.Medicament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Ingredients")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PrescriptionId")
                        .HasColumnType("int");

                    b.Property<string>("Producer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StateOfValidation")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("Medicaments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "L123",
                            Ingredients = "sastojak1, sastojak2, sastojak3",
                            MedicalRecordId = 1,
                            Name = "Brufen",
                            PrescriptionId = 1,
                            Producer = "Hemofarm",
                            Quantity = 10,
                            StateOfValidation = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = "L233",
                            Ingredients = "sastojak1, sastojak2, sastojak3",
                            MedicalRecordId = 2,
                            Name = "Panadol",
                            PrescriptionId = 1,
                            Producer = "Hemofarm",
                            Quantity = 10,
                            StateOfValidation = 0
                        },
                        new
                        {
                            Id = 3,
                            Code = "L523",
                            Ingredients = "sastojak1, sastojak2, sastojak3",
                            MedicalRecordId = 3,
                            Name = "Paracetamol",
                            PrescriptionId = 3,
                            Producer = "Hemofarm",
                            Quantity = 10,
                            StateOfValidation = 0
                        },
                        new
                        {
                            Id = 4,
                            Code = "L423",
                            Ingredients = "sastojak1, sastojak2, sastojak3",
                            MedicalRecordId = 4,
                            Name = "Vitamin B",
                            PrescriptionId = 2,
                            Producer = "Hemofarm",
                            Quantity = 10,
                            StateOfValidation = 0
                        },
                        new
                        {
                            Id = 5,
                            Code = "L233",
                            Ingredients = "sastojak1, sastojak2, sastojak3",
                            MedicalRecordId = 1,
                            Name = "Panadol",
                            PrescriptionId = 2,
                            Producer = "Hemofarm",
                            Quantity = 14,
                            StateOfValidation = 0
                        });
                });

            modelBuilder.Entity("Model.Manager.InventaryRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("InventaryRoom");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Stolovi",
                            Quantity = 1,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Stolice",
                            Quantity = 1,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kreveti",
                            Quantity = 1,
                            RoomId = 2
                        });
                });

            modelBuilder.Entity("Model.Patient.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SurveyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SurveyId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Grade = 1,
                            QuestionId = 1,
                            SurveyId = 1
                        },
                        new
                        {
                            Id = 2,
                            Grade = 4,
                            QuestionId = 2,
                            SurveyId = 1
                        },
                        new
                        {
                            Id = 3,
                            Grade = 2,
                            QuestionId = 3,
                            SurveyId = 1
                        },
                        new
                        {
                            Id = 4,
                            Grade = 3,
                            QuestionId = 4,
                            SurveyId = 1
                        },
                        new
                        {
                            Id = 5,
                            Grade = 0,
                            QuestionId = 5,
                            SurveyId = 1
                        },
                        new
                        {
                            Id = 6,
                            Grade = 4,
                            QuestionId = 6,
                            SurveyId = 1
                        },
                        new
                        {
                            Id = 7,
                            Grade = 1,
                            QuestionId = 7,
                            SurveyId = 1
                        },
                        new
                        {
                            Id = 8,
                            Grade = 1,
                            QuestionId = 8,
                            SurveyId = 1
                        },
                        new
                        {
                            Id = 9,
                            Grade = 3,
                            QuestionId = 9,
                            SurveyId = 2
                        },
                        new
                        {
                            Id = 10,
                            Grade = 2,
                            QuestionId = 1,
                            SurveyId = 2
                        },
                        new
                        {
                            Id = 11,
                            Grade = 4,
                            QuestionId = 2,
                            SurveyId = 2
                        },
                        new
                        {
                            Id = 12,
                            Grade = 4,
                            QuestionId = 3,
                            SurveyId = 2
                        },
                        new
                        {
                            Id = 13,
                            Grade = 3,
                            QuestionId = 4,
                            SurveyId = 2
                        },
                        new
                        {
                            Id = 14,
                            Grade = 1,
                            QuestionId = 5,
                            SurveyId = 2
                        },
                        new
                        {
                            Id = 15,
                            Grade = 2,
                            QuestionId = 6,
                            SurveyId = 2
                        },
                        new
                        {
                            Id = 16,
                            Grade = 2,
                            QuestionId = 7,
                            SurveyId = 2
                        },
                        new
                        {
                            Id = 17,
                            Grade = 4,
                            QuestionId = 8,
                            SurveyId = 2
                        },
                        new
                        {
                            Id = 18,
                            Grade = 3,
                            QuestionId = 9,
                            SurveyId = 2
                        });
                });

            modelBuilder.Entity("Model.Patient.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionText = "Ljubaznost doktora prema pacijentu",
                            QuestionType = 0
                        },
                        new
                        {
                            Id = 2,
                            QuestionText = "Posvećenost doktora pacijentu",
                            QuestionType = 0
                        },
                        new
                        {
                            Id = 3,
                            QuestionText = "Pružanje informacija od strane doktora o mom zdravstvenom stanju i mogućnostima lečenja",
                            QuestionType = 0
                        },
                        new
                        {
                            Id = 4,
                            QuestionText = "Ljubaznost medicinskog osoblja prema pacijentu",
                            QuestionType = 1
                        },
                        new
                        {
                            Id = 5,
                            QuestionText = "Posvećenost medicinskog osoblja pacijentu",
                            QuestionType = 1
                        },
                        new
                        {
                            Id = 6,
                            QuestionText = "Profesionalizam u obavljanju svoji duznosti medicinskog osoblja",
                            QuestionType = 1
                        },
                        new
                        {
                            Id = 7,
                            QuestionText = "Ispunjenost vremena zakazanog termina i vreme provedeno u cekonici",
                            QuestionType = 2
                        },
                        new
                        {
                            Id = 8,
                            QuestionText = "Higijena unutar bolnice",
                            QuestionType = 2
                        },
                        new
                        {
                            Id = 9,
                            QuestionText = "Opremljenost bolnice",
                            QuestionType = 2
                        });
                });

            modelBuilder.Entity("Model.Patient.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CommentSurvey")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MedicalExaminationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("MedicalExaminationId");

                    b.ToTable("Surveys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CommentSurvey = "Sve je super u bolnici",
                            MedicalExaminationId = 1,
                            PublishingDate = new DateTime(2020, 11, 6, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Naslov"
                        },
                        new
                        {
                            Id = 2,
                            CommentSurvey = "Sve je super u bolnici",
                            MedicalExaminationId = 2,
                            PublishingDate = new DateTime(2020, 11, 6, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            Title = "Naslov"
                        });
                });

            modelBuilder.Entity("Model.PatientDoctor.Allergies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MedicalRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("MedicalRecordId");

                    b.ToTable("Allergies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MedicalRecordId = 1,
                            Name = "Penicilin"
                        },
                        new
                        {
                            Id = 2,
                            MedicalRecordId = 3,
                            Name = "Brufen"
                        },
                        new
                        {
                            Id = 3,
                            MedicalRecordId = 2,
                            Name = "Panadol"
                        },
                        new
                        {
                            Id = 4,
                            MedicalRecordId = 1,
                            Name = "Ambrozija"
                        });
                });

            modelBuilder.Entity("Model.PatientDoctor.Anamnesis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Anamnesies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Pacijent je dobro"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Pacijent je loše"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Pacijent je vrlo dobro"
                        });
                });

            modelBuilder.Entity("Model.PatientDoctor.Diagnosis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnamnesisId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisId");

                    b.ToTable("Diagnosies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnamnesisId = 1,
                            Name = "Prehlada"
                        },
                        new
                        {
                            Id = 2,
                            AnamnesisId = 2,
                            Name = "Virus"
                        },
                        new
                        {
                            Id = 3,
                            AnamnesisId = 2,
                            Name = "Migrena"
                        });
                });

            modelBuilder.Entity("Model.PatientDoctor.MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("ActiveMedicalRecord")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("AnamnesisId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActiveMedicalRecord = true,
                            AnamnesisId = 1,
                            PatientId = 1
                        },
                        new
                        {
                            Id = 2,
                            ActiveMedicalRecord = true,
                            AnamnesisId = 1,
                            PatientId = 2
                        },
                        new
                        {
                            Id = 3,
                            ActiveMedicalRecord = true,
                            AnamnesisId = 1,
                            PatientId = 3
                        },
                        new
                        {
                            Id = 4,
                            ActiveMedicalRecord = true,
                            AnamnesisId = 1,
                            PatientId = 4
                        },
                        new
                        {
                            Id = 5,
                            ActiveMedicalRecord = true,
                            AnamnesisId = 1,
                            PatientId = 5
                        },
                        new
                        {
                            Id = 6,
                            ActiveMedicalRecord = true,
                            AnamnesisId = 1,
                            PatientId = 6
                        });
                });

            modelBuilder.Entity("Model.PatientDoctor.Symptoms", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnamnesisId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("AnamnesisId");

                    b.ToTable("Symptomes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnamnesisId = 2,
                            Name = "Temperatura"
                        },
                        new
                        {
                            Id = 2,
                            AnamnesisId = 1,
                            Name = "Kašalj"
                        },
                        new
                        {
                            Id = 3,
                            AnamnesisId = 2,
                            Name = "Glavobolja"
                        });
                });

            modelBuilder.Entity("Model.Term.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Canceled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CancellationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DoctorWorkDayId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MedicalExaminationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorWorkDayId");

                    b.HasIndex("MedicalExaminationId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Canceled = false,
                            CancellationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorWorkDayId = 1,
                            EndTime = new DateTime(2020, 12, 20, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            MedicalExaminationId = 1,
                            StartTime = new DateTime(2020, 12, 20, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Canceled = false,
                            CancellationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorWorkDayId = 2,
                            EndTime = new DateTime(2020, 12, 18, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalExaminationId = 2,
                            StartTime = new DateTime(2020, 12, 18, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Canceled = false,
                            CancellationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorWorkDayId = 3,
                            EndTime = new DateTime(2020, 12, 25, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalExaminationId = 4,
                            StartTime = new DateTime(2020, 12, 25, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Canceled = false,
                            CancellationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorWorkDayId = 4,
                            EndTime = new DateTime(2020, 12, 20, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalExaminationId = 6,
                            StartTime = new DateTime(2020, 12, 20, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Canceled = false,
                            CancellationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorWorkDayId = 4,
                            EndTime = new DateTime(2020, 12, 10, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            MedicalExaminationId = 4,
                            StartTime = new DateTime(2020, 12, 10, 12, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Canceled = false,
                            CancellationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorWorkDayId = 4,
                            EndTime = new DateTime(2020, 12, 9, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalExaminationId = 2,
                            StartTime = new DateTime(2020, 12, 9, 15, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            Canceled = false,
                            CancellationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorWorkDayId = 2,
                            EndTime = new DateTime(2020, 12, 18, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalExaminationId = 5,
                            StartTime = new DateTime(2020, 12, 18, 15, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            Canceled = false,
                            CancellationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorWorkDayId = 5,
                            EndTime = new DateTime(2020, 12, 21, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            MedicalExaminationId = 3,
                            StartTime = new DateTime(2020, 12, 21, 8, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            Canceled = true,
                            CancellationDate = new DateTime(2020, 11, 18, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorWorkDayId = 6,
                            EndTime = new DateTime(2020, 11, 21, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            MedicalExaminationId = 7,
                            StartTime = new DateTime(2020, 11, 21, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            Canceled = true,
                            CancellationDate = new DateTime(2020, 11, 20, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorWorkDayId = 7,
                            EndTime = new DateTime(2020, 11, 23, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            MedicalExaminationId = 8,
                            StartTime = new DateTime(2020, 11, 23, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            Canceled = true,
                            CancellationDate = new DateTime(2020, 11, 25, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorWorkDayId = 8,
                            EndTime = new DateTime(2020, 11, 28, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            MedicalExaminationId = 9,
                            StartTime = new DateTime(2020, 11, 28, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            Canceled = true,
                            CancellationDate = new DateTime(2020, 11, 26, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorWorkDayId = 9,
                            EndTime = new DateTime(2020, 11, 29, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            MedicalExaminationId = 10,
                            StartTime = new DateTime(2020, 11, 29, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            Canceled = true,
                            CancellationDate = new DateTime(2020, 11, 27, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorWorkDayId = 10,
                            EndTime = new DateTime(2020, 11, 30, 8, 30, 0, 0, DateTimeKind.Unspecified),
                            MedicalExaminationId = 11,
                            StartTime = new DateTime(2020, 11, 30, 8, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            Canceled = true,
                            CancellationDate = new DateTime(2020, 11, 18, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorWorkDayId = 6,
                            EndTime = new DateTime(2020, 11, 21, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            MedicalExaminationId = 12,
                            StartTime = new DateTime(2020, 11, 21, 9, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Model.Term.DoctorWorkDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("RoomId");

                    b.ToTable("DoctorWorkDays");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2020, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 1,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2020, 12, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2020, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 3,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2020, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 4,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2020, 12, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 2,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2020, 11, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 9,
                            RoomId = 1
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2020, 11, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 8,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2020, 11, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 7,
                            RoomId = 2
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2020, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 6,
                            RoomId = 3
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2020, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = 5,
                            RoomId = 3
                        });
                });

            modelBuilder.Entity("Model.Term.MedicalExamination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("SurveyFilled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("ToDateTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("RoomId");

                    b.ToTable("MedicalExaminations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DoctorId = 1,
                            FromDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 2,
                            RoomId = 1,
                            ShortDescription = "Sve je bilo u redu na pregledu",
                            SurveyFilled = false,
                            ToDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            DoctorId = 2,
                            FromDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            RoomId = 2,
                            ShortDescription = "Pacijent je imao glavobolju",
                            SurveyFilled = false,
                            ToDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            DoctorId = 2,
                            FromDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            RoomId = 3,
                            ShortDescription = "Sve je bilo u redu na pregledu",
                            SurveyFilled = false,
                            ToDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            DoctorId = 3,
                            FromDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            RoomId = 2,
                            ShortDescription = "Pacijenta je boleo stomak",
                            SurveyFilled = false,
                            ToDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            DoctorId = 2,
                            FromDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 3,
                            RoomId = 2,
                            ShortDescription = "Pacijenta je boleo stomak",
                            SurveyFilled = false,
                            ToDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            DoctorId = 4,
                            FromDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 1,
                            RoomId = 3,
                            ShortDescription = "Sve je bilo u redu na pregledu",
                            SurveyFilled = false,
                            ToDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            DoctorId = 9,
                            FromDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 5,
                            RoomId = 1,
                            ShortDescription = "Sve je bilo u redu na pregledu",
                            SurveyFilled = false,
                            ToDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            DoctorId = 8,
                            FromDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 5,
                            RoomId = 2,
                            ShortDescription = "Pacijenta je boleo stomak",
                            SurveyFilled = false,
                            ToDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            DoctorId = 7,
                            FromDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 5,
                            RoomId = 2,
                            ShortDescription = "Pacijenta je boleo stomak",
                            SurveyFilled = false,
                            ToDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            DoctorId = 6,
                            FromDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 6,
                            RoomId = 3,
                            ShortDescription = "Sve je bilo u redu na pregledu",
                            SurveyFilled = false,
                            ToDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            DoctorId = 5,
                            FromDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 6,
                            RoomId = 3,
                            ShortDescription = "Sve je bilo u redu na pregledu",
                            SurveyFilled = false,
                            ToDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            DoctorId = 9,
                            FromDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = 6,
                            RoomId = 1,
                            ShortDescription = "Pacijenta je boleo stomak",
                            SurveyFilled = false,
                            ToDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Model.Term.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RoomId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("ToDateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("TypeOfRoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeOfRoomId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FromDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = "101",
                            ToDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeOfRoomId = 1
                        },
                        new
                        {
                            Id = 2,
                            FromDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = "201",
                            ToDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeOfRoomId = 1
                        },
                        new
                        {
                            Id = 3,
                            FromDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoomId = "301",
                            ToDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TypeOfRoomId = 1
                        });
                });

            modelBuilder.Entity("Model.Term.TypeOfRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NameOfType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("TypesOfRoom");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameOfType = "Soba za preglede"
                        },
                        new
                        {
                            Id = 2,
                            NameOfType = "Soba za operacije"
                        });
                });

            modelBuilder.Entity("Backend.Model.BlogAndNotification.PatientFeedback", b =>
                {
                    b.HasOne("Model.AllActors.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Model.PatientDoctor.MedicalExaminationReport", b =>
                {
                    b.HasOne("Model.Term.MedicalExamination", "MedicalExamination")
                        .WithMany()
                        .HasForeignKey("MedicalExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Model.PatientDoctor.Prescription", b =>
                {
                    b.HasOne("Model.Term.MedicalExamination", "MedicalExamination")
                        .WithMany()
                        .HasForeignKey("MedicalExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.AllActors.City", b =>
                {
                    b.HasOne("Model.AllActors.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.AllActors.Doctor", b =>
                {
                    b.HasOne("Model.AllActors.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Doctor.Specialitation", "Specialitation")
                        .WithMany()
                        .HasForeignKey("SpecialitationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.AllActors.Patient", b =>
                {
                    b.HasOne("Model.AllActors.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.DoctorMenager.Medicament", b =>
                {
                    b.HasOne("Model.PatientDoctor.MedicalRecord", "MedicalRecord")
                        .WithMany("Medicaments")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Model.PatientDoctor.Prescription", "Prescription")
                        .WithMany("Medicaments")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Manager.InventaryRoom", b =>
                {
                    b.HasOne("Model.Term.Room", "Room")
                        .WithMany("Equipment")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Patient.Answer", b =>
                {
                    b.HasOne("Model.Patient.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Patient.Survey", "Survey")
                        .WithMany("Answers")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Patient.Survey", b =>
                {
                    b.HasOne("Model.Term.MedicalExamination", "MedicalExamination")
                        .WithMany()
                        .HasForeignKey("MedicalExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.PatientDoctor.Allergies", b =>
                {
                    b.HasOne("Model.PatientDoctor.MedicalRecord", "MedicalRecord")
                        .WithMany("Allergies")
                        .HasForeignKey("MedicalRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.PatientDoctor.Diagnosis", b =>
                {
                    b.HasOne("Model.PatientDoctor.Anamnesis", "Anamnesis")
                        .WithMany("Diagnosis")
                        .HasForeignKey("AnamnesisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.PatientDoctor.MedicalRecord", b =>
                {
                    b.HasOne("Model.PatientDoctor.Anamnesis", "Anamnesis")
                        .WithMany()
                        .HasForeignKey("AnamnesisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.AllActors.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.PatientDoctor.Symptoms", b =>
                {
                    b.HasOne("Model.PatientDoctor.Anamnesis", "Anamnesis")
                        .WithMany("Symptoms")
                        .HasForeignKey("AnamnesisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Term.Appointment", b =>
                {
                    b.HasOne("Model.Term.DoctorWorkDay", "DoctorWorkDay")
                        .WithMany("ScheduledAppointments")
                        .HasForeignKey("DoctorWorkDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Term.MedicalExamination", "MedicalExamination")
                        .WithMany()
                        .HasForeignKey("MedicalExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Term.DoctorWorkDay", b =>
                {
                    b.HasOne("Model.AllActors.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Term.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Term.MedicalExamination", b =>
                {
                    b.HasOne("Model.AllActors.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.AllActors.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Term.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.Term.Room", b =>
                {
                    b.HasOne("Model.Term.TypeOfRoom", "TypeOfRoom")
                        .WithMany()
                        .HasForeignKey("TypeOfRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
