// <auto-generated />
using System;
using Backend.Repository.MySQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Migrations
{
    [DbContext(typeof(HealthClinicDbContext))]
    [Migration("20201108000237_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Backend.Model.BlogAndNotification.PatientFeedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsForPublishing")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PatientID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientFeedbacks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAnonymous = false,
                            IsForPublishing = true,
                            IsPublished = true,
                            PatientID = 1,
                            PublishingDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Iako rečenica nema značenje, ona ima dugu istoriju. Nju su nekoliko vekova koristili tipografi da bi prikazali najistaknutije osobine svojih fontova. Koristi se zbog toga što slova koja su uključena u nju, kao i razmak između slova u tim kombinacijama na najbolji mogući način otkrivaju težinu, dizajn i druge važne funkcije slovnog oblika."
                        },
                        new
                        {
                            Id = 2,
                            IsAnonymous = true,
                            IsForPublishing = true,
                            IsPublished = true,
                            PatientID = 2,
                            PublishingDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Iako rečenica nema značenje, ona ima dugu istoriju. Nju su nekoliko vekova koristili tipografi da bi prikazali najistaknutije osobine svojih fontova. Koristi se zbog toga što slova koja su uključena u nju, kao i razmak između slova u tim kombinacijama na najbolji mogući način otkrivaju težinu, dizajn i druge važne funkcije slovnog oblika."
                        },
                        new
                        {
                            Id = 3,
                            IsAnonymous = true,
                            IsForPublishing = true,
                            IsPublished = false,
                            PatientID = 3,
                            PublishingDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Iako rečenica nema značenje, ona ima dugu istoriju. Nju su nekoliko vekova koristili tipografi da bi prikazali najistaknutije osobine svojih fontova. Koristi se zbog toga što slova koja su uključena u nju, kao i razmak između slova u tim kombinacijama na najbolji mogući način otkrivaju težinu, dizajn i druge važne funkcije slovnog oblika."
                        },
                        new
                        {
                            Id = 4,
                            IsAnonymous = false,
                            IsForPublishing = false,
                            IsPublished = false,
                            PatientID = 4,
                            PublishingDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Iako rečenica nema značenje, ona ima dugu istoriju. Nju su nekoliko vekova koristili tipografi da bi prikazali najistaknutije osobine svojih fontova. Koristi se zbog toga što slova koja su uključena u nju, kao i razmak između slova u tim kombinacijama na najbolji mogući način otkrivaju težinu, dizajn i druge važne funkcije slovnog oblika."
                        },
                        new
                        {
                            Id = 5,
                            IsAnonymous = false,
                            IsForPublishing = false,
                            IsPublished = false,
                            PatientID = 2,
                            PublishingDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Iako rečenica nema značenje, ona ima dugu istoriju. Nju su nekoliko vekova koristili tipografi da bi prikazali najistaknutije osobine svojih fontova. Koristi se zbog toga što slova koja su uključena u nju, kao i razmak između slova u tim kombinacijama na najbolji mogući način otkrivaju težinu, dizajn i druge važne funkcije slovnog oblika."
                        },
                        new
                        {
                            Id = 6,
                            IsAnonymous = true,
                            IsForPublishing = true,
                            IsPublished = false,
                            PatientID = 4,
                            PublishingDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "Iako rečenica nema značenje, ona ima dugu istoriju. Nju su nekoliko vekova koristili tipografi da bi prikazali najistaknutije osobine svojih fontova. Koristi se zbog toga što slova koja su uključena u nju, kao i razmak između slova u tim kombinacijama na najbolji mogući način otkrivaju težinu, dizajn i druge važne funkcije slovnog oblika."
                        });
                });

            modelBuilder.Entity("Model.AllActors.City", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("PostCode")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("CountryID");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            id = 1,
                            CountryID = 1,
                            Name = "Beograd",
                            PostCode = 11000
                        });
                });

            modelBuilder.Entity("Model.AllActors.Country", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Code = "SRB",
                            Name = "Srbija"
                        });
                });

            modelBuilder.Entity("Model.AllActors.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EMail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("GuestAccount")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Jmbg")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("MedicalRecordID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("cityID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactNumber = "063555333",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "pera@gmail.com",
                            GuestAccount = false,
                            Jmbg = "123",
                            MedicalRecordID = 1,
                            Name = "Petar",
                            Password = "123",
                            Surname = "Petrovic",
                            Username = "pera",
                            cityID = 1
                        },
                        new
                        {
                            Id = 2,
                            ContactNumber = "063555333",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "pera@gmail.com",
                            GuestAccount = false,
                            Jmbg = "123",
                            MedicalRecordID = 1,
                            Name = "Milos",
                            Password = "123",
                            Surname = "Mitrovic",
                            Username = "pera",
                            cityID = 1
                        },
                        new
                        {
                            Id = 3,
                            ContactNumber = "063555333",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "pera@gmail.com",
                            GuestAccount = false,
                            Jmbg = "123",
                            MedicalRecordID = 1,
                            Name = "Jovan",
                            Password = "123",
                            Surname = "Jovanovic",
                            Username = "pera",
                            cityID = 1
                        },
                        new
                        {
                            Id = 4,
                            ContactNumber = "063555333",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EMail = "pera@gmail.com",
                            GuestAccount = false,
                            Jmbg = "123",
                            MedicalRecordID = 1,
                            Name = "Milica",
                            Password = "123",
                            Surname = "Micic",
                            Username = "pera",
                            cityID = 1
                        });
                });

            modelBuilder.Entity("Model.DoctorMenager.Medicament", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Ingredients")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("MedicalRecordid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Producer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("StateOfValidation")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("MedicalRecordid");

                    b.ToTable("Medicaments");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Code = "c35",
                            Ingredients = "sastojak1, sastojak2, sastojak3",
                            Name = "Brufen",
                            Producer = "Hemofarm",
                            Quantity = 10,
                            StateOfValidation = 0
                        });
                });

            modelBuilder.Entity("Model.PatientDoctor.Allergies", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("MedicalRecordid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.HasIndex("MedicalRecordid");

                    b.ToTable("Allergiess");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Name = "penicilin"
                        });
                });

            modelBuilder.Entity("Model.PatientDoctor.Anamnesis", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.ToTable("Anamnesies");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Description = "pacijent je dobro"
                        });
                });

            modelBuilder.Entity("Model.PatientDoctor.Diagnosis", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Anamnesisid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.HasIndex("Anamnesisid");

                    b.ToTable("Diagnosies");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Name = "prehlada"
                        });
                });

            modelBuilder.Entity("Model.PatientDoctor.MedicalRecord", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int>("anamnesisID")
                        .HasColumnType("int");

                    b.Property<int>("patientID")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("anamnesisID");

                    b.ToTable("MedicalRecords");

                    b.HasData(
                        new
                        {
                            id = 1,
                            anamnesisID = 1,
                            patientID = 1
                        });
                });

            modelBuilder.Entity("Model.PatientDoctor.Symptoms", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Anamnesisid")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("id");

                    b.HasIndex("Anamnesisid");

                    b.ToTable("Symptomes");

                    b.HasData(
                        new
                        {
                            id = 1,
                            Name = "temperatura"
                        },
                        new
                        {
                            id = 3,
                            Name = "kijanje"
                        });
                });

            modelBuilder.Entity("Backend.Model.BlogAndNotification.PatientFeedback", b =>
                {
                    b.HasOne("Model.AllActors.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.AllActors.City", b =>
                {
                    b.HasOne("Model.AllActors.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.DoctorMenager.Medicament", b =>
                {
                    b.HasOne("Model.PatientDoctor.MedicalRecord", null)
                        .WithMany("Medicament")
                        .HasForeignKey("MedicalRecordid");
                });

            modelBuilder.Entity("Model.PatientDoctor.Allergies", b =>
                {
                    b.HasOne("Model.PatientDoctor.MedicalRecord", null)
                        .WithMany("Allergies")
                        .HasForeignKey("MedicalRecordid");
                });

            modelBuilder.Entity("Model.PatientDoctor.Diagnosis", b =>
                {
                    b.HasOne("Model.PatientDoctor.Anamnesis", null)
                        .WithMany("Diagnosis")
                        .HasForeignKey("Anamnesisid");
                });

            modelBuilder.Entity("Model.PatientDoctor.MedicalRecord", b =>
                {
                    b.HasOne("Model.PatientDoctor.Anamnesis", "Anamnesis")
                        .WithMany()
                        .HasForeignKey("anamnesisID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.AllActors.Patient", "Patient")
                        .WithOne("MedicalRecord")
                        .HasForeignKey("Model.PatientDoctor.MedicalRecord", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Model.PatientDoctor.Symptoms", b =>
                {
                    b.HasOne("Model.PatientDoctor.Anamnesis", null)
                        .WithMany("Symptoms")
                        .HasForeignKey("Anamnesisid");
                });
#pragma warning restore 612, 618
        }
    }
}
